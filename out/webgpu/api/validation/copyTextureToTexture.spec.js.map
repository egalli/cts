{"version":3,"sources":["../../../../src/webgpu/api/validation/copyTextureToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","kTextureUsages","ValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","isSuccess","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","g","test","fn","t","validTexture","createTexture","size","width","height","depth","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","errorTexture","getErrorTexture","texture","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","srcTexture","mipLevelCount","dstTexture","mipLevel","combine","srcUsage","dstUsage","srcSampleCount","dstSampleCount","sampleCount","x","y","z","expand","p","Math","max","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin"],"mappings":"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","sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n\nTest Plan: (TODO(jiawei.shao@intel.com): add all the remaining tests)\n* the source and destination texture\n  - the {source, destination} texture is {invalid, valid}.\n  - mipLevel {>, =, <} the mipmap level count of the {source, destination} texture.\n  - the source texture is created {with, without} GPUTextureUsage::CopySrc.\n  - the destination texture is created {with, without} GPUTextureUsage::CopyDst.\n* sample count\n  - the sample count of the source texture {is, isn't} equal to the one of the destination texture\n  - when the sample count is greater than 1:\n    - it {is, isn't} a copy of the whole subresource of the source texture.\n    - it {is, isn't} a copy of the whole subresource of the destination texture.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { kTextureUsages } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUTextureCopyView,\n    destination: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    isSuccess: boolean\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !isSuccess);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_texture').fn(async t => {\n  const validTexture = t.device.createTexture({\n    size: { width: 4, height: 4, depth: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const errorTexture = t.getErrorTexture();\n\n  t.TestCopyTextureToTexture(\n    { texture: errorTexture },\n    { texture: validTexture },\n    { width: 1, height: 1, depth: 1 },\n    false\n  );\n  t.TestCopyTextureToTexture(\n    { texture: validTexture },\n    { texture: errorTexture },\n    { width: 1, height: 1, depth: 1 },\n    false\n  );\n});\n\ng.test('mipmap_level')\n  .params([\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n  ] as const)\n  .fn(async t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_usage')\n  .params(\n    params()\n      .combine(poptions('srcUsage', kTextureUsages))\n      .combine(poptions('dstUsage', kTextureUsages))\n  )\n  .fn(async t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('sample_count')\n  .params(\n    params()\n      .combine(poptions('srcSampleCount', [1, 4]))\n      .combine(poptions('dstSampleCount', [1, 4]))\n  )\n  .fn(async t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .params(\n    params()\n      .combine(\n        poptions('srcCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .combine(\n        poptions('dstCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .expand(p => poptions('copyWidth', [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16]))\n      .expand(p => poptions('copyHeight', [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8]))\n  )\n  .fn(async t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: 4,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depth: 1 },\n      isSuccess\n    );\n  });\n"],"file":"copyTextureToTexture.spec.js"}