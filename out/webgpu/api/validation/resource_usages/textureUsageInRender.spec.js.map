{"version":3,"sources":["../../../../../src/webgpu/api/validation/resource_usages/textureUsageInRender.spec.ts"],"names":["description","pbool","poptions","params","makeTestGroup","assert","kDepthStencilFormats","kDepthStencilFormatInfo","kTextureBindingTypes","kTextureBindingTypeInfo","kShaderStages","ValidationTest","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","device","size","depth","dimension","createBindGroup","index","view","bindingType","bindingTexFormat","entries","binding","resource","layout","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","type","viewDimension","storageTextureFormat","createAndExecuteBundle","bindGroup","pass","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","beginRenderPass","colorAttachments","attachment","loadValue","r","g","b","a","storeOp","testValidationScope","STORAGE","createView","bindGroup0","undefined","bindGroup1","createCommandEncoder","pipeline","createNoOpRenderPipeline","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","combine","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","type0","type1","_usageSuccess","unless","binding0InBundle","binding1InBundle","fn","t","texture","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","endPass","storageTextureFormat0","storageTextureFormat1","success","expectValidationError","baseLevel","baseLayer","aspect0","aspect1","stencil","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","disjointAspects","readVisibility","writeVisibility","writeHasVertexStage","Boolean","VERTEX","texUsage","bglEntries","bgEntries","push","info","sampledView","sampledStorageView","bglEntries0","bgEntries0","bindGroups","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","useBindGroup0","useBindGroup1","setBindGroupsOrder","setPipeline","callDraw","wgslVertex","wgslFragment","createRenderPipeline","vertexStage","module","createShaderModule","code","entryPoint","fragmentStage","primitiveTopology","colorStates","index0","index1","draw","pass1"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass.\n\nTest Coverage:\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - For various places that resources are used, for example, used in bundle or used in render\n        pass directly.\n        - Check that an error is generated when read-write or write-write usages are binding to the\n          same texture subresource. Otherwise, no error should be generated. One exception is race\n          condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be tracked. Invisible shader\n      stages include shader stage with visibility none and compute shader stage in render pass.\n\n  - Tests replaced bindings:\n    - Texture usages via bindings replaced by another setBindGroup() upon the same bindGroup index\n      in current scope should be tracked.\n\n  - Test texture usages in bundle:\n    - Texture usages in bundle should be tracked if that bundle is executed in the current scope.\n\n  - Test texture usages with unused bindings:\n    - Texture usages should be tracked even its bindings is not used in pipeline.\n\n  - Test texture usages validation scope:\n    - Texture usages should be tracked per each render pass.\n`;\n\nimport { pbool, poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/framework/util/util.js';\nimport {\n  kDepthStencilFormats,\n  kDepthStencilFormatInfo,\n  kTextureBindingTypes,\n  kTextureBindingTypeInfo,\n  kShaderStages,\n} from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroup(\n    index: number,\n    view: GPUTextureView,\n    bindingType: GPUBindingType,\n    dimension: GPUTextureViewDimension,\n    bindingTexFormat: GPUTextureFormat | undefined\n  ): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [{ binding: index, resource: view }],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: index,\n            visibility: GPUShaderStage.FRAGMENT,\n            type: bindingType,\n            viewDimension: dimension,\n            storageTextureFormat: bindingTexFormat,\n          },\n        ],\n      }),\n    });\n  }\n\n  createAndExecuteBundle(index: number, bindGroup: GPUBindGroup, pass: GPURenderPassEncoder) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n    bundleEncoder.setBindGroup(index, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: view,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  testValidationScope(): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder;\n    pipeline: GPURenderPipeline;\n  } {\n    // Create two bind groups. Resource usages conflict between these two bind groups. But resource\n    // usage inside each bind group doesn't conflict.\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n    }).createView();\n    const bindGroup0 = this.createBindGroup(0, view, 'sampled-texture', '2d', undefined);\n    const bindGroup1 = this.createBindGroup(\n      0,\n      view,\n      'writeonly-storage-texture',\n      '2d',\n      'rgba8unorm'\n    );\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create a pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipeline = this.createNoOpRenderPipeline();\n    return { bindGroup0, bindGroup1, encoder, pass, pipeline };\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(\n    params()\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        // Race condition upon multiple writable storage texture is valid.\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'render-target',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      // Every color attachment can use only one single subresource.\n      .unless(\n        ({ type0, levelCount0, layerCount0, type1, levelCount1, layerCount1 }) =>\n          (type0 === 'render-target' && (levelCount0 !== 1 || layerCount0 !== 1)) ||\n          (type1 === 'render-target' && (levelCount1 !== 1 || layerCount1 !== 1))\n      )\n      // All color attachments' size should be the same.\n      .unless(\n        ({ type0, type1, baseLevel1 }) =>\n          type0 === 'render-target' && type1 === 'render-target' && baseLevel1 !== BASE_LEVEL\n      )\n      .unless(\n        ({ binding0InBundle, binding1InBundle, type0, type1 }) =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (binding0InBundle && type0 === 'render-target') ||\n          (binding1InBundle && type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageSuccess,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            attachment: view0,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n          {\n            attachment: view1,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.endPass();\n    } else {\n      const pass = t.beginSimpleRenderPass(\n        encoder,\n        type1 === 'render-target' ? view1 : t.createTexture().createView()\n      );\n\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      const bindGroup0 = t.createBindGroup(0, view0, type0, dimension0, storageTextureFormat0);\n      if (binding0InBundle) {\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n        const bindGroup1 = t.createBindGroup(1, view1, type1, dimension1, storageTextureFormat1);\n        if (binding1InBundle) {\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      pass.endPass();\n    }\n\n    const success = _resourceSuccess || _usageSuccess;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(\n    params()\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('format', kDepthStencilFormats))\n      .combine([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine(poptions('aspect0', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('aspect1', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        ({ format, aspect0, aspect1 }) =>\n          (aspect0 === 'stencil-only' && !kDepthStencilFormatInfo[format].stencil) ||\n          (aspect1 === 'stencil-only' && !kDepthStencilFormatInfo[format].stencil)\n      )\n      .unless(\n        ({ format, aspect0, aspect1 }) =>\n          (aspect0 === 'depth-only' && !kDepthStencilFormatInfo[format].depth) ||\n          (aspect1 === 'depth-only' && !kDepthStencilFormatInfo[format].depth)\n      )\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        ({ binding1InBundle, type1 }) =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          binding1InBundle && type1 === 'render-target'\n      )\n  )\n  .fn(async t => {\n    const {\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const size = SIZE >> baseLevel;\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: t.createTexture({ width: size, height: size }).createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment:\n        type1 !== 'render-target'\n          ? undefined\n          : {\n              attachment: view1,\n              depthStoreOp: 'clear',\n              depthLoadValue: 'load',\n              stencilStoreOp: 'clear',\n              stencilLoadValue: 'load',\n            },\n    });\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', undefined);\n    if (binding0InBundle) {\n      t.createAndExecuteBundle(0, bindGroup0, pass);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', undefined);\n      if (binding1InBundle) {\n        t.createAndExecuteBundle(1, bindGroup1, pass);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(\n    params()\n      .combine(poptions('readVisibility', [0, ...kShaderStages]))\n      .combine(poptions('writeVisibility', [0, ...kShaderStages]))\n  )\n  .fn(async t => {\n    const { readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, type: 'sampled-texture' },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        type: 'writeonly-storage-texture',\n        storageTextureFormat: 'rgba8unorm',\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      writeHasVertexStage ? view : t.createTexture().createView()\n    );\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be tracked. Invisible shader\n    // stages include shader stage with visibility none and compute shader stage in render pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\n// We should track the texture usages in bindings which are replaced by another setBindGroup()\n// call site upon the same index in the same render pass.\ng.test('replaced_binding')\n  .params(poptions('bindingType', kTextureBindingTypes))\n  .fn(async t => {\n    const { bindingType } = t.params;\n    const info = kTextureBindingTypeInfo[bindingType];\n    const bindingTexFormat = info.resource === 'storageTex' ? 'rgba8unorm' : undefined;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: bindingType,\n        storageTextureFormat: bindingTexFormat,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresoure of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', undefined);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be tracked too.\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(0, bindGroup1);\n    pass.endPass();\n\n    const success = bindingType === 'writeonly-storage-texture' ? false : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .params(\n    params()\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('type0', ['render-target', ...kTextureBindingTypes] as const))\n      .combine(poptions('type1', ['render-target', ...kTextureBindingTypes] as const))\n      .unless(\n        ({ binding0InBundle, binding1InBundle, type0, type1 }) =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (binding0InBundle && type0 === 'render-target') ||\n          (binding1InBundle && type1 === 'render-target') ||\n          (!binding0InBundle && !binding1InBundle)\n      )\n  )\n  .fn(async t => {\n    const { binding0InBundle, binding1InBundle, type0, type1 } = t.params;\n\n    // Two bindings are attached to the same texture view.\n    const view = t\n      .createTexture({\n        usage:\n          GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', binding0TexFormat);\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', binding1TexFormat);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.endPass();\n\n    let success = false;\n    if (\n      (type0 === 'sampled-texture' || type0 === 'readonly-storage-texture') &&\n      (type1 === 'sampled-texture' || type1 === 'readonly-storage-texture')\n    ) {\n      success = true;\n    }\n\n    if (type0 === 'writeonly-storage-texture' && type1 === 'writeonly-storage-texture') {\n      success = true;\n    }\n\n    // Resource usages in bundle should be tracked. And validation error should be reported\n    // if needed.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .params(\n    params()\n      .combine(pbool('useBindGroup0'))\n      .combine(pbool('useBindGroup1'))\n      .combine(poptions('setBindGroupsOrder', ['common', 'reversed'] as const))\n      .combine(poptions('setPipeline', ['before', 'middle', 'after', 'none'] as const))\n      .combine(pbool('callDraw'))\n  )\n  .fn(async t => {\n    const { useBindGroup0, useBindGroup1, setBindGroupsOrder, setPipeline, callDraw } = t.params;\n    const view = t.createTexture({ usage: GPUTextureUsage.STORAGE }).createView();\n    const bindGroup0 = t.createBindGroup(0, view, 'readonly-storage-texture', '2d', 'rgba8unorm');\n    const bindGroup1 = t.createBindGroup(0, view, 'writeonly-storage-texture', '2d', 'rgba8unorm');\n\n    const wgslVertex = `\n      fn main() -> void {\n        return;\n      }\n\n      entry_point vertex = main;\n    `;\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslFragment = `\n      ${useBindGroup0 ? '[[set 0, binding 0]] var<image> image0;' : ''}\n      ${useBindGroup1 ? '[[set 1, binding 0]] var<image> image1;' : ''}\n      fn main() -> void {\n        return;\n      }\n\n      entry_point fragment = main;\n    `;\n    const pipeline = t.device.createRenderPipeline({\n      vertexStage: {\n        module: t.device.createShaderModule({\n          code: wgslVertex,\n        }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: t.device.createShaderModule({\n          code: wgslFragment,\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') pass.setPipeline(pipeline);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') pass.setPipeline(pipeline);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') pass.setPipeline(pipeline);\n    if (callDraw) pass.draw(3, 1, 0, 0);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,no_draw').fn(async t => {\n  const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup0);\n  pass.setBindGroup(1, bindGroup1);\n  pass.endPass();\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  });\n});\n\ng.test('validation_scope,same_draw').fn(async t => {\n  const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup0);\n  pass.setBindGroup(1, bindGroup1);\n  pass.draw(3, 1, 0, 0);\n  pass.endPass();\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  });\n});\n\ng.test('validation_scope,different_draws').fn(async t => {\n  const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup0);\n  pass.draw(3, 1, 0, 0);\n  pass.setBindGroup(1, bindGroup1);\n  pass.draw(3, 1, 0, 0);\n  pass.endPass();\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  });\n});\n\ng.test('validation_scope,different_passes').fn(async t => {\n  const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup0);\n  pass.endPass();\n\n  const pass1 = t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n  pass1.setPipeline(pipeline);\n  pass1.setBindGroup(1, bindGroup1);\n  pass1.endPass();\n\n  // No validation error.\n  encoder.finish();\n});\n"],"file":"textureUsageInRender.spec.js"}